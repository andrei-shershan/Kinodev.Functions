trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotNetFramework: 'net8.0'
  dotNetVersion: '8.0.x'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotNetVersion)'
      inputs:
        version: $(dotNetVersion)
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: 'Kinodev.Functions.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: 'Kinodev.Functions.sln'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Azure Function'
      inputs:
        command: 'publish'
        projects: 'src/Kinodev.Functions.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
        publishWebProjects: false
        zipAfterPublish: false

    - task: CopyFiles@2
      displayName: 'Ensure host.json is in publish root'
      inputs:
        SourceFolder: 'src'
        Contents: 'host.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/publish'
        OverWrite: true

    - script: |
        echo "Verifying deployment package structure:"
        ls -la $(Build.ArtifactStagingDirectory)/publish/
        echo "Checking for host.json:"
        if [ -f "$(Build.ArtifactStagingDirectory)/publish/host.json" ]; then
          echo "✓ host.json found in publish root"
          cat $(Build.ArtifactStagingDirectory)/publish/host.json
        else
          echo "✗ host.json NOT found in publish root"
          exit 1
        fi
      displayName: 'Verify deployment package structure'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
        ArtifactName: 'function-app'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure Function App'
    environment: 'kinodev-live'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'function-app'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              appType: 'functionApp'
              appName: '$(AZURE_FUNCTION_NAME)'
              package: '$(System.ArtifactsDirectory)/function-app'
              deploymentMethod: 'auto'
